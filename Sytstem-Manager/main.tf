resource "aws_ssm_document" "ac--AWSQuickSetup-AddOrRemoveTag-PatchPolicy-gj7vw" {
  content         = "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Quick Setup document for remediating the name tag on EC2 instances.\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\"\n    },\n    \"QSConfigurationId\" : {\n      \"type\" : \"String\"\n    },\n    \"TagAction\" : {\n      \"allowedValues\" : [ \"Add\", \"Remove\" ],\n      \"type\" : \"String\"\n    },\n    \"QSConfigurationName\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{InstanceId}}\",\n        \"StartsWith\" : \"i-\",\n        \"NextStep\" : \"branchOnActionEC2\"\n      }, {\n        \"Variable\" : \"{{InstanceId}}\",\n        \"StartsWith\" : \"mi-\",\n        \"NextStep\" : \"branchOnActionHybrid\"\n      } ]\n    },\n    \"name\" : \"branchOnInstanceType\",\n    \"action\" : \"aws:branch\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"Remove\",\n        \"Variable\" : \"{{TagAction}}\",\n        \"NextStep\" : \"removeTagFromEC2Node\"\n      }, {\n        \"StringEquals\" : \"Add\",\n        \"Variable\" : \"{{TagAction}}\",\n        \"NextStep\" : \"addTagToEC2Node\"\n      } ]\n    },\n    \"name\" : \"branchOnActionEC2\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DeleteTags\",\n      \"Resources\" : [ \"{{InstanceId}}\" ],\n      \"Tags\" : [ {\n        \"Key\" : \"QSConfigName-{{QSConfigurationId}}\"\n      } ]\n    },\n    \"name\" : \"removeTagFromEC2Node\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateTags\",\n      \"Resources\" : [ \"{{InstanceId}}\" ],\n      \"Tags\" : [ {\n        \"Value\" : \"{{QSConfigurationName}}\",\n        \"Key\" : \"QSConfigName-{{QSConfigurationId}}\"\n      } ]\n    },\n    \"name\" : \"addTagToEC2Node\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{TagAction}}\",\n        \"StartsWith\" : \"Remove\",\n        \"NextStep\" : \"removeTagFromHybridNode\"\n      }, {\n        \"StringEquals\" : \"Add\",\n        \"Variable\" : \"{{TagAction}}\",\n        \"NextStep\" : \"addTagToHybridNode\"\n      } ]\n    },\n    \"name\" : \"branchOnActionHybrid\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"ResourceId\" : \"{{InstanceId}}\",\n      \"Service\" : \"ssm\",\n      \"ResourceType\" : \"ManagedInstance\",\n      \"Api\" : \"RemoveTagsFromResource\",\n      \"TagKeys\" : [ \"QSConfigName-{{QSConfigurationId}}\" ]\n    },\n    \"name\" : \"removeTagFromHybridNode\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"ResourceId\" : \"{{InstanceId}}\",\n      \"Service\" : \"ssm\",\n      \"ResourceType\" : \"ManagedInstance\",\n      \"Api\" : \"AddTagsToResource\",\n      \"Tags\" : [ {\n        \"Value\" : \"{{QSConfigurationName}}\",\n        \"Key\" : \"QSConfigName-{{QSConfigurationId}}\"\n      } ]\n    },\n    \"name\" : \"addTagToHybridNode\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"isEnd\" : true\n  } ]\n}"
  document_format = "JSON"
  document_type   = "Automation"
  name            = "AWSQuickSetup-AddOrRemoveTag-PatchPolicy-gj7vw"

  tags = {
    QuickSetupID      = "gj7vw"
    QuickSetupType    = "Patch Manager"
    QuickSetupVersion = "1.3"
  }

  target_type = "/"
}

resource "aws_ssm_document" "ac--AWSQuickSetup-CreateAndAttachIAMToEc2Node-gj7vw" {
  content         = "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Composite document for Quick Setup Managing Instances association. This document ensures IAM role for instance profile is created in account with all required policies\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\"\n    },\n    \"AwsAccountId\" : {\n      \"type\" : \"String\"\n    },\n    \"QSConfigurationId\" : {\n      \"type\" : \"String\"\n    },\n    \"IsPolicyAttachAllowed\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{InstanceId}}\",\n        \"StartsWith\" : \"i-\",\n        \"NextStep\" : \"getExistingRoleName\"\n      } ]\n    },\n    \"name\" : \"branchOnInstanceType\",\n    \"action\" : \"aws:branch\",\n    \"isEnd\" : true\n  }, {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingInstanceProfileRoleName\",\n      \"Selector\" : \"$.Payload.RoleName\"\n    } ],\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\n\\ndef getInstanceProfileName(events, context):\\n    ec2_client = boto3.client(\\\"ec2\\\")\\n    response = ec2_client.describe_instances(InstanceIds=[events[\\\"InstanceId\\\"]])\\n    if 'IamInstanceProfile' in response['Reservations'][0]['Instances'][0]:\\n        return {'RoleName': response['Reservations'][0]['Instances'][0]['IamInstanceProfile']['Arn'].split('instance-profile/')[1]}\\n    return {'RoleName': 'NoRoleFound'}\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"InstanceId\" : \"{{InstanceId}}\"\n      },\n      \"Handler\" : \"getInstanceProfileName\"\n    },\n    \"name\" : \"getExistingRoleName\",\n    \"action\" : \"aws:executeScript\",\n    \"nextStep\" : \"branchIfProfileExists\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"NoRoleFound\",\n        \"Variable\" : \"{{getExistingRoleName.existingInstanceProfileRoleName}}\",\n        \"NextStep\" : \"createRoleIfNotExists\"\n      } ],\n      \"Default\" : \"checkIfPolicyAttachAllowed\"\n    },\n    \"name\" : \"branchIfProfileExists\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"true\",\n        \"Variable\" : \"{{IsPolicyAttachAllowed}}\",\n        \"NextStep\" : \"getRoleFromInstanceProfile\"\n      } ],\n      \"Default\" : \"createRoleIfNotExists\"\n    },\n    \"name\" : \"checkIfPolicyAttachAllowed\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingRoleName\",\n      \"Selector\" : \"$.InstanceProfile.Roles[0].RoleName\"\n    } ],\n    \"inputs\" : {\n      \"InstanceProfileName\" : \"{{getExistingRoleName.existingInstanceProfileRoleName}}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetInstanceProfile\"\n    },\n    \"name\" : \"getRoleFromInstanceProfile\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"createBaselineOverridePolicyForExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\niam_client = boto3.client('iam')            \\ndef createBaselineOverridePolicy(events, context):\\n    try:\\n        policy_name = events['PolicyName']\\n        iam_client.create_policy(PolicyName=policy_name,PolicyDocument=events['PolicyDocument'],Path=events['Path'])\\n    except ClientError as e:\\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Policy already exists. Skipping creation.')\\n        else:\\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/ssm/quicksetup/patchpolicy/\",\n        \"PolicyName\" : \"aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n        \"PolicyDocument\" : \"{\\\"Version\\\": \\\"2012-10-17\\\",\\\"Statement\\\": [{\\\"Effect\\\": \\\"Allow\\\",\\\"Action\\\": \\\"s3:GetObject\\\",\\\"Resource\\\": \\\"arn:aws:s3:::aws-quicksetup-patchpolicy-*\\\"}]}\"\n      },\n      \"Handler\" : \"createBaselineOverridePolicy\"\n    },\n    \"name\" : \"createBaselineOverridePolicyForExistingRole\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create the S3 Bucket Policy. If exception and EntityAlreadyExists, continue, else Abort.\",\n    \"nextStep\" : \"attachBaselineOverridePolicyToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::766176144542:policy/ssm/quicksetup/patchpolicy/aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachBaselineOverridePolicyToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Attach required managed policy to Instance Profile role.\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"onFailure\" : \"Abort\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachTagToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"TagRole\",\n      \"Tags\" : [ {\n        \"Value\" : \"gj7vw\",\n        \"Key\" : \"QSConfigId-gj7vw\"\n      } ]\n    },\n    \"name\" : \"attachTagToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\niam_client = boto3.client('iam')            \\ndef createRoleIfNotExists(events, context):\\n    try:\\n        iam_client.create_role(\\n            Path=events['Path'],\\n            RoleName=events['RoleName'],\\n            AssumeRolePolicyDocument=events['AssumeRolePolicyDocument'],\\n            Description=events['Description']\\n        )\\n    except ClientError as e:\\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Role already exists. Skipping creation.')\\n        else:\\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/\",\n        \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n        \"Description\" : \"EC2 role for SSM for Quick-Setup\",\n        \"AssumeRolePolicyDocument\" : \"{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"ec2.amazonaws.com\\\"},\\\"Action\\\":\\\"sts:AssumeRole\\\"}]}\"\n      },\n      \"Handler\" : \"createRoleIfNotExists\"\n    },\n    \"name\" : \"createRoleIfNotExists\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create AmazonSSMRoleForInstancesQuickSetup Role For SSM Quick Setup\",\n    \"nextStep\" : \"assertRoleForInstanceProfileExists\"\n  }, {\n    \"inputs\" : {\n      \"PropertySelector\" : \"$.Role.RoleName\",\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"DesiredValues\" : [ \"AmazonSSMRoleForInstancesQuickSetup\" ],\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetRole\"\n    },\n    \"name\" : \"assertRoleForInstanceProfileExists\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"nextStep\" : \"createBaselineOverridePolicyForRole\"\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\niam_client = boto3.client('iam')            \\ndef createBaselineOverridePolicy(events, context):\\n    try:\\n        policy_name = events['PolicyName']\\n        iam_client.create_policy(PolicyName=policy_name,PolicyDocument=events['PolicyDocument'],Path=events['Path'])\\n    except ClientError as e:\\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Policy already exists. Skipping creation.')\\n        else:\\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/ssm/quicksetup/patchpolicy/\",\n        \"PolicyName\" : \"aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n        \"PolicyDocument\" : \"{\\\"Version\\\": \\\"2012-10-17\\\",\\\"Statement\\\": [{\\\"Effect\\\": \\\"Allow\\\",\\\"Action\\\": \\\"s3:GetObject\\\",\\\"Resource\\\": \\\"arn:aws:s3:::aws-quicksetup-patchpolicy-*\\\"}]}\"\n      },\n      \"Handler\" : \"createBaselineOverridePolicy\"\n    },\n    \"name\" : \"createBaselineOverridePolicyForRole\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create the S3 Bucket Policy. If exception and EntityAlreadyExists, continue, else Abort.\",\n    \"nextStep\" : \"attachBaselineOverridePolicyToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::766176144542:policy/ssm/quicksetup/patchpolicy/aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachBaselineOverridePolicyToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Attach required managed policy to Instance Profile role.\",\n    \"nextStep\" : \"attachTagToRole\",\n    \"onFailure\" : \"Abort\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"TagRole\",\n      \"Tags\" : [ {\n        \"Value\" : \"gj7vw\",\n        \"Key\" : \"QSConfigId-gj7vw\"\n      } ]\n    },\n    \"name\" : \"attachTagToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"executeAttachIAMToInstance\"\n  }, {\n    \"maxAttempts\" : 10,\n    \"inputs\" : {\n      \"RuntimeParameters\" : {\n        \"AutomationAssumeRole\" : \"{{ AutomationAssumeRole }}\",\n        \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n        \"InstanceId\" : \"{{ InstanceId }}\",\n        \"ForceReplace\" : false\n      },\n      \"DocumentName\" : \"AWS-AttachIAMToInstance\"\n    },\n    \"name\" : \"executeAttachIAMToInstance\",\n    \"action\" : \"aws:executeAutomation\",\n    \"timeoutSeconds\" : 60,\n    \"isEnd\" : true\n  } ]\n}"
  document_format = "JSON"
  document_type   = "Automation"
  name            = "AWSQuickSetup-CreateAndAttachIAMToEc2Node-gj7vw"

  tags = {
    QuickSetupID      = "gj7vw"
    QuickSetupType    = "Patch Manager"
    QuickSetupVersion = "1.3"
  }

  target_type = "/AWS::EC2::Instance"
}

resource "aws_ssm_document" "ac--AWSQuickSetup-CreateAndAttachIAMToHybridNode-gj7vw" {
  content         = "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Composite document for Quick Setup IAM Management of hybrid instances. This document ensures IAM role for instance profile is created in account with all required policies for Hybrid nodes.\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\"\n    },\n    \"AwsAccountId\" : {\n      \"type\" : \"String\"\n    },\n    \"QSConfigurationId\" : {\n      \"type\" : \"String\"\n    },\n    \"Region\" : {\n      \"type\" : \"String\"\n    },\n    \"IsPolicyAttachAllowed\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{InstanceId}}\",\n        \"StartsWith\" : \"mi-\",\n        \"NextStep\" : \"getExistingRoleName\"\n      } ]\n    },\n    \"name\" : \"branchOnInstanceType\",\n    \"action\" : \"aws:branch\",\n    \"isEnd\" : true\n  }, {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"roleName\",\n      \"Selector\" : \"$.Payload.RoleName\"\n    } ],\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\n\\ndef getRoleName(events, context):\\n    region = events[\\\"Region\\\"]\\n    ssm_client = boto3.client(\\\"ssm\\\", region)\\n    response = ssm_client.describe_instance_information(\\n        InstanceInformationFilterList=[\\n            {\\n                'key': 'InstanceIds',\\n                'valueSet': [\\n                    events[\\\"InstanceId\\\"],\\n                ]\\n            },\\n        ]\\n    )\\n   \\n    if len (response[\\\"InstanceInformationList\\\"]) > 0 and \\\"IamRole\\\" in response[\\\"InstanceInformationList\\\"][0]: \\n        return {'RoleName': response[\\\"InstanceInformationList\\\"][0][\\\"IamRole\\\"]}\\n    return {'RoleName': 'NoRoleFound'}\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"InstanceId\" : \"{{InstanceId}}\",\n        \"Region\" : \"{{Region}}\"\n      },\n      \"Handler\" : \"getRoleName\"\n    },\n    \"name\" : \"getExistingRoleName\",\n    \"action\" : \"aws:executeScript\",\n    \"nextStep\" : \"branchIfProfileExists\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"NoRoleFound\",\n        \"Variable\" : \"{{getExistingRoleName.roleName}}\",\n        \"NextStep\" : \"createRoleIfNotExists\"\n      } ],\n      \"Default\" : \"checkIfPolicyAttachAllowed\"\n    },\n    \"name\" : \"branchIfProfileExists\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"true\",\n        \"Variable\" : \"{{IsPolicyAttachAllowed}}\",\n        \"NextStep\" : \"createBaselineOverridePolicyForExistingRole\"\n      } ],\n      \"Default\" : \"createRoleIfNotExists\"\n    },\n    \"name\" : \"checkIfPolicyAttachAllowed\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\n\\niam_client = boto3.client('iam')            \\n\\ndef createBaselineOverridePolicy(events, context):\\n    try:\\n        policy_name = events['PolicyName']\\n        iam_client.create_policy(PolicyName=policy_name,PolicyDocument=events['PolicyDocument'],Path=events['Path'])\\n    except ClientError as e:\\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Policy already exists. Skipping creation.')\\n        else:\\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/ssm/quicksetup/patchpolicy/\",\n        \"PolicyName\" : \"aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n        \"PolicyDocument\" : \"{\\\"Version\\\": \\\"2012-10-17\\\",\\\"Statement\\\": [{\\\"Effect\\\": \\\"Allow\\\",\\\"Action\\\": \\\"s3:GetObject\\\",\\\"Resource\\\": \\\"arn:aws:s3:::aws-quicksetup-patchpolicy-*\\\"}]}\"\n      },\n      \"Handler\" : \"createBaselineOverridePolicy\"\n    },\n    \"name\" : \"createBaselineOverridePolicyForExistingRole\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create the S3 Bucket Policy. If exception and EntityAlreadyExists, continue, else Abort.\",\n    \"nextStep\" : \"attachBaselineOverridePolicyToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getExistingRoleName.roleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::766176144542:policy/ssm/quicksetup/patchpolicy/aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachBaselineOverridePolicyToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Attach required managed policy to Instance Profile role.\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"onFailure\" : \"Abort\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getExistingRoleName.roleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachTagToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getExistingRoleName.roleName}}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"TagRole\",\n      \"Tags\" : [ {\n        \"Value\" : \"gj7vw\",\n        \"Key\" : \"QSConfigId-gj7vw\"\n      } ]\n    },\n    \"name\" : \"attachTagToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\n\\niam_client = boto3.client('iam')   \\n\\ndef createRoleIfNotExists(events, context):\\n    try:\\n        iam_client.create_role(Path=events['Path'], RoleName=events['RoleName'], AssumeRolePolicyDocument=events['AssumeRolePolicyDocument'], Description=events['Description'])\\n    except ClientError as e:        \\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Role already exists. Skipping creation.')\\n        else:            \\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/\",\n        \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n        \"Description\" : \"SSM Hybrid role for SSM for Quick-Setup\",\n        \"AssumeRolePolicyDocument\" : \"{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"ssm.amazonaws.com\\\"},\\\"Action\\\":\\\"sts:AssumeRole\\\"}]}\"\n      },\n      \"Handler\" : \"createRoleIfNotExists\"\n    },\n    \"name\" : \"createRoleIfNotExists\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create AmazonSSMRoleForInstancesQuickSetup Role For SSM Quick Setup\",\n    \"nextStep\" : \"assertRoleExists\"\n  }, {\n    \"inputs\" : {\n      \"PropertySelector\" : \"$.Role.RoleName\",\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"DesiredValues\" : [ \"AmazonSSMRoleForInstancesQuickSetup\" ],\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetRole\"\n    },\n    \"name\" : \"assertRoleExists\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"nextStep\" : \"createBaselineOverridePolicy\"\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\n\\niam_client = boto3.client('iam')            \\n\\ndef createBaselineOverridePolicy(events, context):\\n    try:\\n        policy_name = events['PolicyName']\\n        iam_client.create_policy(PolicyName=policy_name,PolicyDocument=events['PolicyDocument'],Path=events['Path'])\\n    except ClientError as e:\\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Policy already exists. Skipping creation.')\\n        else:\\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/ssm/quicksetup/patchpolicy/\",\n        \"PolicyName\" : \"aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n        \"PolicyDocument\" : \"{\\\"Version\\\": \\\"2012-10-17\\\",\\\"Statement\\\": [{\\\"Effect\\\": \\\"Allow\\\",\\\"Action\\\": \\\"s3:GetObject\\\",\\\"Resource\\\": \\\"arn:aws:s3:::aws-quicksetup-patchpolicy-*\\\"}]}\"\n      },\n      \"Handler\" : \"createBaselineOverridePolicy\"\n    },\n    \"name\" : \"createBaselineOverridePolicy\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create the S3 Bucket Policy. If exception and EntityAlreadyExists, continue, else Abort.\",\n    \"nextStep\" : \"attachBaselineOverridePolicyToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::766176144542:policy/ssm/quicksetup/patchpolicy/aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachBaselineOverridePolicyToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Attach required managed policy to Instance Profile role.\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToRole\",\n    \"onFailure\" : \"Abort\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachTagToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"TagRole\",\n      \"Tags\" : [ {\n        \"Value\" : \"gj7vw\",\n        \"Key\" : \"QSConfigId-gj7vw\"\n      } ]\n    },\n    \"name\" : \"attachTagToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachRoleToInstance\"\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\n\\ndef addRoleToHybridInstance(events, context):\\n    try:\\n        ssm_client = boto3.client('ssm', region_name=events['Region'])   \\n        ssm_client.update_managed_instance_role(InstanceId=events['InstanceId'],IamRole=events['RoleName'])\\n    except ClientError as e:                   \\n        raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n        \"InstanceId\" : \"{{InstanceId}}\",\n        \"Region\" : \"{{Region}}\"\n      },\n      \"Handler\" : \"addRoleToHybridInstance\"\n    },\n    \"name\" : \"attachRoleToInstance\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Add AmazonSSMRoleForInstancesQuickSetup Role to the hybrid (mi-) instance.\",\n    \"isEnd\" : true\n  } ]\n}"
  document_format = "JSON"
  document_type   = "Automation"
  name            = "AWSQuickSetup-CreateAndAttachIAMToHybridNode-gj7vw"

  tags = {
    QuickSetupID      = "gj7vw"
    QuickSetupType    = "Patch Manager"
    QuickSetupVersion = "1.3"
  }

  target_type = "/AWS::SSM::ManagedInstance"
}

resource "aws_ssm_document" "ac--AWSQuickSetup-CreateAndAttachIAMToInstance-tjdfj" {
  content         = "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Composite document for Quick Setup Managing Instances association. This document ensures IAM role for instance profile is created in account with all required policies\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\"\n    },\n    \"IsPolicyAttachAllowed\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingInstanceProfileRoleName\",\n      \"Selector\" : \"$.Payload.RoleName\"\n    } ],\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\n\\ndef getInstanceProfileName(events, context):\\n    ec2_client = boto3.client(\\\"ec2\\\")\\n    response = ec2_client.describe_instances(InstanceIds=[events[\\\"InstanceId\\\"]])\\n    if 'IamInstanceProfile' in response['Reservations'][0]['Instances'][0]:\\n        return {'RoleName': response['Reservations'][0]['Instances'][0]['IamInstanceProfile']['Arn'].split('/').pop()}\\n    return {'RoleName': 'NoRoleFound'}\",\n      \"Runtime\" : \"python3.6\",\n      \"InputPayload\" : {\n        \"InstanceId\" : \"{{InstanceId}}\"\n      },\n      \"Handler\" : \"getInstanceProfileName\"\n    },\n    \"name\" : \"getExistingRoleName\",\n    \"action\" : \"aws:executeScript\",\n    \"nextStep\" : \"branchIfProfileExists\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"NoRoleFound\",\n        \"Variable\" : \"{{getExistingRoleName.existingInstanceProfileRoleName}}\",\n        \"NextStep\" : \"createRoleIfNotExists\"\n      } ],\n      \"Default\" : \"checkIfPolicyAttachAllowed\"\n    },\n    \"name\" : \"branchIfProfileExists\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"true\",\n        \"Variable\" : \"{{IsPolicyAttachAllowed}}\",\n        \"NextStep\" : \"getRoleFromInstanceProfile\"\n      } ],\n      \"Default\" : \"createRoleIfNotExists\"\n    },\n    \"name\" : \"checkIfPolicyAttachAllowed\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingRoleName\",\n      \"Selector\" : \"$.InstanceProfile.Roles[0].RoleName\"\n    } ],\n    \"inputs\" : {\n      \"InstanceProfileName\" : \"{{getExistingRoleName.existingInstanceProfileRoleName}}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetInstanceProfile\"\n    },\n    \"name\" : \"getRoleFromInstanceProfile\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMPatchAssociationToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMPatchAssociation\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMPatchAssociationToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Path\" : \"/\",\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"Description\" : \"EC2 role for SSM for Quick-Setup\",\n      \"AssumeRolePolicyDocument\" : \"{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"ec2.amazonaws.com\\\"},\\\"Action\\\":\\\"sts:AssumeRole\\\"}]}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"CreateRole\"\n    },\n    \"name\" : \"createRoleIfNotExists\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Create AmazonSSMRoleForInstancesQuickSetup Role For SSM Quick Setup\",\n    \"onFailure\" : \"Continue\",\n    \"nextStep\" : \"assertRoleForInstanceProfileExists\"\n  }, {\n    \"inputs\" : {\n      \"PropertySelector\" : \"$.Role.RoleName\",\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"DesiredValues\" : [ \"AmazonSSMRoleForInstancesQuickSetup\" ],\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetRole\"\n    },\n    \"name\" : \"assertRoleForInstanceProfileExists\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMPatchAssociationToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMPatchAssociation\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMPatchAssociationToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"createInstanceProfileIfNotExists\"\n  }, {\n    \"inputs\" : {\n      \"InstanceProfileName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"CreateInstanceProfile\"\n    },\n    \"name\" : \"createInstanceProfileIfNotExists\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Continue\",\n    \"nextStep\" : \"addRoleToInstanceProfile\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"InstanceProfileName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AddRoleToInstanceProfile\"\n    },\n    \"name\" : \"addRoleToInstanceProfile\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Continue\",\n    \"nextStep\" : \"executeAttachIAMToInstance\"\n  }, {\n    \"maxAttempts\" : 10,\n    \"inputs\" : {\n      \"RuntimeParameters\" : {\n        \"AutomationAssumeRole\" : \"{{ AutomationAssumeRole }}\",\n        \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n        \"InstanceId\" : \"{{ InstanceId }}\",\n        \"ForceReplace\" : false\n      },\n      \"DocumentName\" : \"AWS-AttachIAMToInstance\"\n    },\n    \"name\" : \"executeAttachIAMToInstance\",\n    \"action\" : \"aws:executeAutomation\",\n    \"timeoutSeconds\" : 60,\n    \"isEnd\" : true\n  } ]\n}"
  document_format = "JSON"
  document_type   = "Automation"
  name            = "AWSQuickSetup-CreateAndAttachIAMToInstance-tjdfj"

  tags = {
    QuickSetupID      = "tjdfj"
    QuickSetupType    = "Host Management"
    QuickSetupVersion = "3.1"
  }

  target_type = "/AWS::EC2::Instance"
}

resource "aws_ssm_document" "ac--AWSQuickSetup-NameTagRemediation-gj7vw" {
  document_format = "JSON"
  document_type   = "Automation"
  name            = "AWSQuickSetup-NameTagRemediation-gj7vw"

  tags = {
    QuickSetupID      = "gj7vw"
    QuickSetupType    = "Patch Manager"
    QuickSetupVersion = "1.3"
  }
}

resource "aws_ssm_document" "ac--AWSQuickSetup-UpdateExistingInstanceProfile-tjdfj" {
  content         = "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Composite document for Quick Setup Managing Instances association. This document updates the user provided instance profile with roles and policies\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceProfile\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingRoleName\",\n      \"Selector\" : \"$.InstanceProfile.Roles[0].RoleName\"\n    } ],\n    \"inputs\" : {\n      \"InstanceProfileName\" : \"{{InstanceProfile}}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetInstanceProfile\"\n    },\n    \"name\" : \"getRoleFromInstanceProfile\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMPatchAssociationToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMPatchAssociation\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMPatchAssociationToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"isEnd\" : true\n  } ]\n}"
  document_format = "JSON"
  document_type   = "Automation"
  name            = "AWSQuickSetup-UpdateExistingInstanceProfile-tjdfj"

  tags = {
    QuickSetupID      = "tjdfj"
    QuickSetupType    = "Host Management"
    QuickSetupVersion = "3.1"
  }

  target_type = "/AWS::EC2::Instance"
}

resource "aws_ssm_document" "ac--QuickSetup-Remediation-AutomationDocument-gj7vw" {
  content         = "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"This Document is to trigger the Lambda function to perform remediation only.\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"default\" : \"arn:aws:iam::766176144542:role/AWS-QuickSetup-Remediation-AutomationRole-gj7vw\",\n      \"type\" : \"String\"\n    },\n    \"BucketName\" : {\n      \"default\" : \"aws-quicksetup-patchpolicy-766176144542-gj7vw\",\n      \"type\" : \"String\"\n    },\n    \"LambdaFunctionArn\" : {\n      \"default\" : \"arn:aws:lambda:eu-west-2:766176144542:function:baseline-overrides-bcd8-gj7vw\",\n      \"type\" : \"String\"\n    },\n    \"PatchBaselines\" : {\n      \"default\" : \"{\\\"ALMA_LINUX\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-026ae12db9c48cb38\\\",\\\"label\\\":\\\"AWS-AlmaLinuxDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Alma Linux Provided by AWS.\\\",\\\"disabled\\\":false},\\\"AMAZON_LINUX\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0be7ab14314283c20\\\",\\\"label\\\":\\\"AWS-AmazonLinuxDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Amazon Linux Provided by AWS.\\\",\\\"disabled\\\":false},\\\"AMAZON_LINUX_2\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0b49b16112356d35a\\\",\\\"label\\\":\\\"AWS-AmazonLinux2DefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Amazon Linux 2 Provided by AWS.\\\",\\\"disabled\\\":false},\\\"AMAZON_LINUX_2022\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0a763b81ab503cd55\\\",\\\"label\\\":\\\"AWS-AmazonLinux2022DefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Amazon Linux 2022 Provided by AWS.\\\",\\\"disabled\\\":false},\\\"AMAZON_LINUX_2023\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0a335ff2e0c9c6d57\\\",\\\"label\\\":\\\"AWS-AmazonLinux2023DefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Amazon Linux 2023 Provided by AWS.\\\",\\\"disabled\\\":false},\\\"CENTOS\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0ab5882985cefc37c\\\",\\\"label\\\":\\\"AWS-CentOSDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for CentOS Provided by AWS.\\\",\\\"disabled\\\":false},\\\"DEBIAN\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0298410e8bfb4ac84\\\",\\\"label\\\":\\\"AWS-DebianDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Debian Provided by AWS.\\\",\\\"disabled\\\":false},\\\"ORACLE_LINUX\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0039cc7b956dbd532\\\",\\\"label\\\":\\\"AWS-OracleLinuxDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Oracle Linux Server Provided by AWS.\\\",\\\"disabled\\\":false},\\\"RASPBIAN\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-06f36acfc3b43e6ee\\\",\\\"label\\\":\\\"AWS-RaspbianDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Raspbian Provided by AWS.\\\",\\\"disabled\\\":false},\\\"REDHAT_ENTERPRISE_LINUX\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0fb89bc9ac3b89eee\\\",\\\"label\\\":\\\"AWS-RedHatDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Redhat Enterprise Linux Provided by AWS.\\\",\\\"disabled\\\":false},\\\"ROCKY_LINUX\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-01c0c0f8181a40210\\\",\\\"label\\\":\\\"AWS-RockyLinuxDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Rocky Linux Provided by AWS.\\\",\\\"disabled\\\":false},\\\"SUSE\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0d96acfb75747719f\\\",\\\"label\\\":\\\"AWS-SuseDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Suse Provided by AWS.\\\",\\\"disabled\\\":false},\\\"UBUNTU\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0ec6a38643f7e78be\\\",\\\"label\\\":\\\"AWS-UbuntuDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Ubuntu Provided by AWS.\\\",\\\"disabled\\\":false},\\\"WINDOWS\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0962e59eb68b92d67\\\",\\\"label\\\":\\\"AWS-DefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline Provided by AWS.\\\",\\\"disabled\\\":false}}\",\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"inputs\" : {\n      \"FunctionName\" : \"{{ LambdaFunctionArn }}\",\n      \"InputPayload\" : {\n        \"ResourceProperties\" : {\n          \"BucketName\" : \"{{ BucketName }}\",\n          \"PatchBaselines\" : \"{{ PatchBaselines }}\"\n        },\n        \"RequestType\" : \"Remediate\"\n      }\n    },\n    \"name\" : \"invokeBaselineOverridesLambdaFunction\",\n    \"action\" : \"aws:invokeLambdaFunction\",\n    \"timeoutSeconds\" : 300\n  } ]\n}"
  document_format = "JSON"
  document_type   = "Automation"
  name            = "QuickSetup-Remediation-AutomationDocument-gj7vw"

  tags = {
    QuickSetupID      = "gj7vw"
    QuickSetupType    = "Patch Manager"
    QuickSetupVersion = "1.3"
  }
}

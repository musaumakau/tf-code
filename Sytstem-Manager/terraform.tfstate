{
  "version": 4,
  "terraform_version": "1.39.0",
  "serial": 1,
  "lineage": "",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_ssm_document",
      "name": "ac--AWSQuickSetup-AddOrRemoveTag-PatchPolicy-gj7vw",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ssm:eu-west-2:766176144542:document/AWSQuickSetup-AddOrRemoveTag-PatchPolicy-gj7vw",
            "attachments_source": null,
            "content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Quick Setup document for remediating the name tag on EC2 instances.\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\"\n    },\n    \"QSConfigurationId\" : {\n      \"type\" : \"String\"\n    },\n    \"TagAction\" : {\n      \"allowedValues\" : [ \"Add\", \"Remove\" ],\n      \"type\" : \"String\"\n    },\n    \"QSConfigurationName\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{InstanceId}}\",\n        \"StartsWith\" : \"i-\",\n        \"NextStep\" : \"branchOnActionEC2\"\n      }, {\n        \"Variable\" : \"{{InstanceId}}\",\n        \"StartsWith\" : \"mi-\",\n        \"NextStep\" : \"branchOnActionHybrid\"\n      } ]\n    },\n    \"name\" : \"branchOnInstanceType\",\n    \"action\" : \"aws:branch\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"Remove\",\n        \"Variable\" : \"{{TagAction}}\",\n        \"NextStep\" : \"removeTagFromEC2Node\"\n      }, {\n        \"StringEquals\" : \"Add\",\n        \"Variable\" : \"{{TagAction}}\",\n        \"NextStep\" : \"addTagToEC2Node\"\n      } ]\n    },\n    \"name\" : \"branchOnActionEC2\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"DeleteTags\",\n      \"Resources\" : [ \"{{InstanceId}}\" ],\n      \"Tags\" : [ {\n        \"Key\" : \"QSConfigName-{{QSConfigurationId}}\"\n      } ]\n    },\n    \"name\" : \"removeTagFromEC2Node\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Service\" : \"ec2\",\n      \"Api\" : \"CreateTags\",\n      \"Resources\" : [ \"{{InstanceId}}\" ],\n      \"Tags\" : [ {\n        \"Value\" : \"{{QSConfigurationName}}\",\n        \"Key\" : \"QSConfigName-{{QSConfigurationId}}\"\n      } ]\n    },\n    \"name\" : \"addTagToEC2Node\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{TagAction}}\",\n        \"StartsWith\" : \"Remove\",\n        \"NextStep\" : \"removeTagFromHybridNode\"\n      }, {\n        \"StringEquals\" : \"Add\",\n        \"Variable\" : \"{{TagAction}}\",\n        \"NextStep\" : \"addTagToHybridNode\"\n      } ]\n    },\n    \"name\" : \"branchOnActionHybrid\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"ResourceId\" : \"{{InstanceId}}\",\n      \"Service\" : \"ssm\",\n      \"ResourceType\" : \"ManagedInstance\",\n      \"Api\" : \"RemoveTagsFromResource\",\n      \"TagKeys\" : [ \"QSConfigName-{{QSConfigurationId}}\" ]\n    },\n    \"name\" : \"removeTagFromHybridNode\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"ResourceId\" : \"{{InstanceId}}\",\n      \"Service\" : \"ssm\",\n      \"ResourceType\" : \"ManagedInstance\",\n      \"Api\" : \"AddTagsToResource\",\n      \"Tags\" : [ {\n        \"Value\" : \"{{QSConfigurationName}}\",\n        \"Key\" : \"QSConfigName-{{QSConfigurationId}}\"\n      } ]\n    },\n    \"name\" : \"addTagToHybridNode\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Abort\",\n    \"isEnd\" : true\n  } ]\n}",
            "created_date": "2023-07-28T06:46:29Z",
            "default_version": "1",
            "description": "Quick Setup document for remediating the name tag on EC2 instances.",
            "document_format": "JSON",
            "document_type": "Automation",
            "document_version": "1",
            "hash": "bbed46afb945b2e898769749bb2e3c574ebe42dada7905dd58e2cee34bf6735c",
            "hash_type": "Sha256",
            "id": "AWSQuickSetup-AddOrRemoveTag-PatchPolicy-gj7vw",
            "latest_version": "1",
            "name": "AWSQuickSetup-AddOrRemoveTag-PatchPolicy-gj7vw",
            "owner": "766176144542",
            "parameter": [
              {
                "default_value": "",
                "description": "",
                "name": "AutomationAssumeRole",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "InstanceId",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "QSConfigurationId",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "TagAction",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "QSConfigurationName",
                "type": "String"
              }
            ],
            "permissions": {},
            "platform_types": [
              "Windows",
              "Linux",
              "MacOS"
            ],
            "schema_version": "0.3",
            "status": "Active",
            "tags": {
              "QuickSetupID": "gj7vw",
              "QuickSetupType": "Patch Manager",
              "QuickSetupVersion": "1.3"
            },
            "tags_all": {
              "QuickSetupID": "gj7vw",
              "QuickSetupType": "Patch Manager",
              "QuickSetupVersion": "1.3"
            },
            "target_type": "/",
            "version_name": ""
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ssm_document",
      "name": "ac--AWSQuickSetup-CreateAndAttachIAMToEc2Node-gj7vw",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ssm:eu-west-2:766176144542:document/AWSQuickSetup-CreateAndAttachIAMToEc2Node-gj7vw",
            "attachments_source": null,
            "content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Composite document for Quick Setup Managing Instances association. This document ensures IAM role for instance profile is created in account with all required policies\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\"\n    },\n    \"AwsAccountId\" : {\n      \"type\" : \"String\"\n    },\n    \"QSConfigurationId\" : {\n      \"type\" : \"String\"\n    },\n    \"IsPolicyAttachAllowed\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{InstanceId}}\",\n        \"StartsWith\" : \"i-\",\n        \"NextStep\" : \"getExistingRoleName\"\n      } ]\n    },\n    \"name\" : \"branchOnInstanceType\",\n    \"action\" : \"aws:branch\",\n    \"isEnd\" : true\n  }, {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingInstanceProfileRoleName\",\n      \"Selector\" : \"$.Payload.RoleName\"\n    } ],\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\n\\ndef getInstanceProfileName(events, context):\\n    ec2_client = boto3.client(\\\"ec2\\\")\\n    response = ec2_client.describe_instances(InstanceIds=[events[\\\"InstanceId\\\"]])\\n    if 'IamInstanceProfile' in response['Reservations'][0]['Instances'][0]:\\n        return {'RoleName': response['Reservations'][0]['Instances'][0]['IamInstanceProfile']['Arn'].split('instance-profile/')[1]}\\n    return {'RoleName': 'NoRoleFound'}\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"InstanceId\" : \"{{InstanceId}}\"\n      },\n      \"Handler\" : \"getInstanceProfileName\"\n    },\n    \"name\" : \"getExistingRoleName\",\n    \"action\" : \"aws:executeScript\",\n    \"nextStep\" : \"branchIfProfileExists\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"NoRoleFound\",\n        \"Variable\" : \"{{getExistingRoleName.existingInstanceProfileRoleName}}\",\n        \"NextStep\" : \"createRoleIfNotExists\"\n      } ],\n      \"Default\" : \"checkIfPolicyAttachAllowed\"\n    },\n    \"name\" : \"branchIfProfileExists\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"true\",\n        \"Variable\" : \"{{IsPolicyAttachAllowed}}\",\n        \"NextStep\" : \"getRoleFromInstanceProfile\"\n      } ],\n      \"Default\" : \"createRoleIfNotExists\"\n    },\n    \"name\" : \"checkIfPolicyAttachAllowed\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingRoleName\",\n      \"Selector\" : \"$.InstanceProfile.Roles[0].RoleName\"\n    } ],\n    \"inputs\" : {\n      \"InstanceProfileName\" : \"{{getExistingRoleName.existingInstanceProfileRoleName}}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetInstanceProfile\"\n    },\n    \"name\" : \"getRoleFromInstanceProfile\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"createBaselineOverridePolicyForExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\niam_client = boto3.client('iam')            \\ndef createBaselineOverridePolicy(events, context):\\n    try:\\n        policy_name = events['PolicyName']\\n        iam_client.create_policy(PolicyName=policy_name,PolicyDocument=events['PolicyDocument'],Path=events['Path'])\\n    except ClientError as e:\\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Policy already exists. Skipping creation.')\\n        else:\\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/ssm/quicksetup/patchpolicy/\",\n        \"PolicyName\" : \"aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n        \"PolicyDocument\" : \"{\\\"Version\\\": \\\"2012-10-17\\\",\\\"Statement\\\": [{\\\"Effect\\\": \\\"Allow\\\",\\\"Action\\\": \\\"s3:GetObject\\\",\\\"Resource\\\": \\\"arn:aws:s3:::aws-quicksetup-patchpolicy-*\\\"}]}\"\n      },\n      \"Handler\" : \"createBaselineOverridePolicy\"\n    },\n    \"name\" : \"createBaselineOverridePolicyForExistingRole\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create the S3 Bucket Policy. If exception and EntityAlreadyExists, continue, else Abort.\",\n    \"nextStep\" : \"attachBaselineOverridePolicyToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::766176144542:policy/ssm/quicksetup/patchpolicy/aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachBaselineOverridePolicyToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Attach required managed policy to Instance Profile role.\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"onFailure\" : \"Abort\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachTagToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"TagRole\",\n      \"Tags\" : [ {\n        \"Value\" : \"gj7vw\",\n        \"Key\" : \"QSConfigId-gj7vw\"\n      } ]\n    },\n    \"name\" : \"attachTagToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\niam_client = boto3.client('iam')            \\ndef createRoleIfNotExists(events, context):\\n    try:\\n        iam_client.create_role(\\n            Path=events['Path'],\\n            RoleName=events['RoleName'],\\n            AssumeRolePolicyDocument=events['AssumeRolePolicyDocument'],\\n            Description=events['Description']\\n        )\\n    except ClientError as e:\\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Role already exists. Skipping creation.')\\n        else:\\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/\",\n        \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n        \"Description\" : \"EC2 role for SSM for Quick-Setup\",\n        \"AssumeRolePolicyDocument\" : \"{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"ec2.amazonaws.com\\\"},\\\"Action\\\":\\\"sts:AssumeRole\\\"}]}\"\n      },\n      \"Handler\" : \"createRoleIfNotExists\"\n    },\n    \"name\" : \"createRoleIfNotExists\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create AmazonSSMRoleForInstancesQuickSetup Role For SSM Quick Setup\",\n    \"nextStep\" : \"assertRoleForInstanceProfileExists\"\n  }, {\n    \"inputs\" : {\n      \"PropertySelector\" : \"$.Role.RoleName\",\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"DesiredValues\" : [ \"AmazonSSMRoleForInstancesQuickSetup\" ],\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetRole\"\n    },\n    \"name\" : \"assertRoleForInstanceProfileExists\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"nextStep\" : \"createBaselineOverridePolicyForRole\"\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\niam_client = boto3.client('iam')            \\ndef createBaselineOverridePolicy(events, context):\\n    try:\\n        policy_name = events['PolicyName']\\n        iam_client.create_policy(PolicyName=policy_name,PolicyDocument=events['PolicyDocument'],Path=events['Path'])\\n    except ClientError as e:\\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Policy already exists. Skipping creation.')\\n        else:\\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/ssm/quicksetup/patchpolicy/\",\n        \"PolicyName\" : \"aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n        \"PolicyDocument\" : \"{\\\"Version\\\": \\\"2012-10-17\\\",\\\"Statement\\\": [{\\\"Effect\\\": \\\"Allow\\\",\\\"Action\\\": \\\"s3:GetObject\\\",\\\"Resource\\\": \\\"arn:aws:s3:::aws-quicksetup-patchpolicy-*\\\"}]}\"\n      },\n      \"Handler\" : \"createBaselineOverridePolicy\"\n    },\n    \"name\" : \"createBaselineOverridePolicyForRole\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create the S3 Bucket Policy. If exception and EntityAlreadyExists, continue, else Abort.\",\n    \"nextStep\" : \"attachBaselineOverridePolicyToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::766176144542:policy/ssm/quicksetup/patchpolicy/aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachBaselineOverridePolicyToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Attach required managed policy to Instance Profile role.\",\n    \"nextStep\" : \"attachTagToRole\",\n    \"onFailure\" : \"Abort\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"TagRole\",\n      \"Tags\" : [ {\n        \"Value\" : \"gj7vw\",\n        \"Key\" : \"QSConfigId-gj7vw\"\n      } ]\n    },\n    \"name\" : \"attachTagToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"executeAttachIAMToInstance\"\n  }, {\n    \"maxAttempts\" : 10,\n    \"inputs\" : {\n      \"RuntimeParameters\" : {\n        \"AutomationAssumeRole\" : \"{{ AutomationAssumeRole }}\",\n        \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n        \"InstanceId\" : \"{{ InstanceId }}\",\n        \"ForceReplace\" : false\n      },\n      \"DocumentName\" : \"AWS-AttachIAMToInstance\"\n    },\n    \"name\" : \"executeAttachIAMToInstance\",\n    \"action\" : \"aws:executeAutomation\",\n    \"timeoutSeconds\" : 60,\n    \"isEnd\" : true\n  } ]\n}",
            "created_date": "2023-07-28T06:46:29Z",
            "default_version": "1",
            "description": "Composite document for Quick Setup Managing Instances association. This document ensures IAM role for instance profile is created in account with all required policies",
            "document_format": "JSON",
            "document_type": "Automation",
            "document_version": "1",
            "hash": "caad9e7cc87fea59b359ef679295ccc39f32e6fd6ae02df1d2ace294a896d0e8",
            "hash_type": "Sha256",
            "id": "AWSQuickSetup-CreateAndAttachIAMToEc2Node-gj7vw",
            "latest_version": "1",
            "name": "AWSQuickSetup-CreateAndAttachIAMToEc2Node-gj7vw",
            "owner": "766176144542",
            "parameter": [
              {
                "default_value": "",
                "description": "",
                "name": "AutomationAssumeRole",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "InstanceId",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "AwsAccountId",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "QSConfigurationId",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "IsPolicyAttachAllowed",
                "type": "String"
              }
            ],
            "permissions": {},
            "platform_types": [
              "Windows",
              "Linux",
              "MacOS"
            ],
            "schema_version": "0.3",
            "status": "Active",
            "tags": {
              "QuickSetupID": "gj7vw",
              "QuickSetupType": "Patch Manager",
              "QuickSetupVersion": "1.3"
            },
            "tags_all": {
              "QuickSetupID": "gj7vw",
              "QuickSetupType": "Patch Manager",
              "QuickSetupVersion": "1.3"
            },
            "target_type": "/AWS::EC2::Instance",
            "version_name": ""
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ssm_document",
      "name": "ac--AWSQuickSetup-CreateAndAttachIAMToHybridNode-gj7vw",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ssm:eu-west-2:766176144542:document/AWSQuickSetup-CreateAndAttachIAMToHybridNode-gj7vw",
            "attachments_source": null,
            "content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Composite document for Quick Setup IAM Management of hybrid instances. This document ensures IAM role for instance profile is created in account with all required policies for Hybrid nodes.\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\"\n    },\n    \"AwsAccountId\" : {\n      \"type\" : \"String\"\n    },\n    \"QSConfigurationId\" : {\n      \"type\" : \"String\"\n    },\n    \"Region\" : {\n      \"type\" : \"String\"\n    },\n    \"IsPolicyAttachAllowed\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"Variable\" : \"{{InstanceId}}\",\n        \"StartsWith\" : \"mi-\",\n        \"NextStep\" : \"getExistingRoleName\"\n      } ]\n    },\n    \"name\" : \"branchOnInstanceType\",\n    \"action\" : \"aws:branch\",\n    \"isEnd\" : true\n  }, {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"roleName\",\n      \"Selector\" : \"$.Payload.RoleName\"\n    } ],\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\n\\ndef getRoleName(events, context):\\n    region = events[\\\"Region\\\"]\\n    ssm_client = boto3.client(\\\"ssm\\\", region)\\n    response = ssm_client.describe_instance_information(\\n        InstanceInformationFilterList=[\\n            {\\n                'key': 'InstanceIds',\\n                'valueSet': [\\n                    events[\\\"InstanceId\\\"],\\n                ]\\n            },\\n        ]\\n    )\\n   \\n    if len (response[\\\"InstanceInformationList\\\"]) > 0 and \\\"IamRole\\\" in response[\\\"InstanceInformationList\\\"][0]: \\n        return {'RoleName': response[\\\"InstanceInformationList\\\"][0][\\\"IamRole\\\"]}\\n    return {'RoleName': 'NoRoleFound'}\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"InstanceId\" : \"{{InstanceId}}\",\n        \"Region\" : \"{{Region}}\"\n      },\n      \"Handler\" : \"getRoleName\"\n    },\n    \"name\" : \"getExistingRoleName\",\n    \"action\" : \"aws:executeScript\",\n    \"nextStep\" : \"branchIfProfileExists\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"NoRoleFound\",\n        \"Variable\" : \"{{getExistingRoleName.roleName}}\",\n        \"NextStep\" : \"createRoleIfNotExists\"\n      } ],\n      \"Default\" : \"checkIfPolicyAttachAllowed\"\n    },\n    \"name\" : \"branchIfProfileExists\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"true\",\n        \"Variable\" : \"{{IsPolicyAttachAllowed}}\",\n        \"NextStep\" : \"createBaselineOverridePolicyForExistingRole\"\n      } ],\n      \"Default\" : \"createRoleIfNotExists\"\n    },\n    \"name\" : \"checkIfPolicyAttachAllowed\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\n\\niam_client = boto3.client('iam')            \\n\\ndef createBaselineOverridePolicy(events, context):\\n    try:\\n        policy_name = events['PolicyName']\\n        iam_client.create_policy(PolicyName=policy_name,PolicyDocument=events['PolicyDocument'],Path=events['Path'])\\n    except ClientError as e:\\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Policy already exists. Skipping creation.')\\n        else:\\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/ssm/quicksetup/patchpolicy/\",\n        \"PolicyName\" : \"aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n        \"PolicyDocument\" : \"{\\\"Version\\\": \\\"2012-10-17\\\",\\\"Statement\\\": [{\\\"Effect\\\": \\\"Allow\\\",\\\"Action\\\": \\\"s3:GetObject\\\",\\\"Resource\\\": \\\"arn:aws:s3:::aws-quicksetup-patchpolicy-*\\\"}]}\"\n      },\n      \"Handler\" : \"createBaselineOverridePolicy\"\n    },\n    \"name\" : \"createBaselineOverridePolicyForExistingRole\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create the S3 Bucket Policy. If exception and EntityAlreadyExists, continue, else Abort.\",\n    \"nextStep\" : \"attachBaselineOverridePolicyToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getExistingRoleName.roleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::766176144542:policy/ssm/quicksetup/patchpolicy/aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachBaselineOverridePolicyToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Attach required managed policy to Instance Profile role.\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"onFailure\" : \"Abort\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getExistingRoleName.roleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachTagToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getExistingRoleName.roleName}}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"TagRole\",\n      \"Tags\" : [ {\n        \"Value\" : \"gj7vw\",\n        \"Key\" : \"QSConfigId-gj7vw\"\n      } ]\n    },\n    \"name\" : \"attachTagToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\n\\niam_client = boto3.client('iam')   \\n\\ndef createRoleIfNotExists(events, context):\\n    try:\\n        iam_client.create_role(Path=events['Path'], RoleName=events['RoleName'], AssumeRolePolicyDocument=events['AssumeRolePolicyDocument'], Description=events['Description'])\\n    except ClientError as e:        \\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Role already exists. Skipping creation.')\\n        else:            \\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/\",\n        \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n        \"Description\" : \"SSM Hybrid role for SSM for Quick-Setup\",\n        \"AssumeRolePolicyDocument\" : \"{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"ssm.amazonaws.com\\\"},\\\"Action\\\":\\\"sts:AssumeRole\\\"}]}\"\n      },\n      \"Handler\" : \"createRoleIfNotExists\"\n    },\n    \"name\" : \"createRoleIfNotExists\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create AmazonSSMRoleForInstancesQuickSetup Role For SSM Quick Setup\",\n    \"nextStep\" : \"assertRoleExists\"\n  }, {\n    \"inputs\" : {\n      \"PropertySelector\" : \"$.Role.RoleName\",\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"DesiredValues\" : [ \"AmazonSSMRoleForInstancesQuickSetup\" ],\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetRole\"\n    },\n    \"name\" : \"assertRoleExists\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"nextStep\" : \"createBaselineOverridePolicy\"\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\n\\niam_client = boto3.client('iam')            \\n\\ndef createBaselineOverridePolicy(events, context):\\n    try:\\n        policy_name = events['PolicyName']\\n        iam_client.create_policy(PolicyName=policy_name,PolicyDocument=events['PolicyDocument'],Path=events['Path'])\\n    except ClientError as e:\\n        if e.response['Error']['Code'] == 'EntityAlreadyExists':\\n            print('Policy already exists. Skipping creation.')\\n        else:\\n            raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"Path\" : \"/ssm/quicksetup/patchpolicy/\",\n        \"PolicyName\" : \"aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n        \"PolicyDocument\" : \"{\\\"Version\\\": \\\"2012-10-17\\\",\\\"Statement\\\": [{\\\"Effect\\\": \\\"Allow\\\",\\\"Action\\\": \\\"s3:GetObject\\\",\\\"Resource\\\": \\\"arn:aws:s3:::aws-quicksetup-patchpolicy-*\\\"}]}\"\n      },\n      \"Handler\" : \"createBaselineOverridePolicy\"\n    },\n    \"name\" : \"createBaselineOverridePolicy\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Create the S3 Bucket Policy. If exception and EntityAlreadyExists, continue, else Abort.\",\n    \"nextStep\" : \"attachBaselineOverridePolicyToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::766176144542:policy/ssm/quicksetup/patchpolicy/aws-quicksetup-patchpolicy-baselineoverrides-s3\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachBaselineOverridePolicyToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Attach required managed policy to Instance Profile role.\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToRole\",\n    \"onFailure\" : \"Abort\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachTagToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"TagRole\",\n      \"Tags\" : [ {\n        \"Value\" : \"gj7vw\",\n        \"Key\" : \"QSConfigId-gj7vw\"\n      } ]\n    },\n    \"name\" : \"attachTagToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachRoleToInstance\"\n  }, {\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\nfrom botocore.exceptions import ClientError\\n\\ndef addRoleToHybridInstance(events, context):\\n    try:\\n        ssm_client = boto3.client('ssm', region_name=events['Region'])   \\n        ssm_client.update_managed_instance_role(InstanceId=events['InstanceId'],IamRole=events['RoleName'])\\n    except ClientError as e:                   \\n        raise e\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n        \"InstanceId\" : \"{{InstanceId}}\",\n        \"Region\" : \"{{Region}}\"\n      },\n      \"Handler\" : \"addRoleToHybridInstance\"\n    },\n    \"name\" : \"attachRoleToInstance\",\n    \"action\" : \"aws:executeScript\",\n    \"onFailure\" : \"Abort\",\n    \"description\" : \"Add AmazonSSMRoleForInstancesQuickSetup Role to the hybrid (mi-) instance.\",\n    \"isEnd\" : true\n  } ]\n}",
            "created_date": "2023-07-28T06:47:24Z",
            "default_version": "1",
            "description": "Composite document for Quick Setup IAM Management of hybrid instances. This document ensures IAM role for instance profile is created in account with all required policies for Hybrid nodes.",
            "document_format": "JSON",
            "document_type": "Automation",
            "document_version": "1",
            "hash": "1e5a52fac34e578b56e4db0748de4b29d4b04f174f6e9586e0f740625141e5d6",
            "hash_type": "Sha256",
            "id": "AWSQuickSetup-CreateAndAttachIAMToHybridNode-gj7vw",
            "latest_version": "1",
            "name": "AWSQuickSetup-CreateAndAttachIAMToHybridNode-gj7vw",
            "owner": "766176144542",
            "parameter": [
              {
                "default_value": "",
                "description": "",
                "name": "AutomationAssumeRole",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "InstanceId",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "AwsAccountId",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "QSConfigurationId",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "Region",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "IsPolicyAttachAllowed",
                "type": "String"
              }
            ],
            "permissions": {},
            "platform_types": [
              "Windows",
              "Linux",
              "MacOS"
            ],
            "schema_version": "0.3",
            "status": "Active",
            "tags": {
              "QuickSetupID": "gj7vw",
              "QuickSetupType": "Patch Manager",
              "QuickSetupVersion": "1.3"
            },
            "tags_all": {
              "QuickSetupID": "gj7vw",
              "QuickSetupType": "Patch Manager",
              "QuickSetupVersion": "1.3"
            },
            "target_type": "/AWS::SSM::ManagedInstance",
            "version_name": ""
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ssm_document",
      "name": "ac--AWSQuickSetup-CreateAndAttachIAMToInstance-tjdfj",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ssm:eu-west-2:766176144542:document/AWSQuickSetup-CreateAndAttachIAMToInstance-tjdfj",
            "attachments_source": null,
            "content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Composite document for Quick Setup Managing Instances association. This document ensures IAM role for instance profile is created in account with all required policies\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\"\n    },\n    \"IsPolicyAttachAllowed\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingInstanceProfileRoleName\",\n      \"Selector\" : \"$.Payload.RoleName\"\n    } ],\n    \"inputs\" : {\n      \"Script\" : \"import boto3\\n\\ndef getInstanceProfileName(events, context):\\n    ec2_client = boto3.client(\\\"ec2\\\")\\n    response = ec2_client.describe_instances(InstanceIds=[events[\\\"InstanceId\\\"]])\\n    if 'IamInstanceProfile' in response['Reservations'][0]['Instances'][0]:\\n        return {'RoleName': response['Reservations'][0]['Instances'][0]['IamInstanceProfile']['Arn'].split('/').pop()}\\n    return {'RoleName': 'NoRoleFound'}\",\n      \"Runtime\" : \"python3.6\",\n      \"InputPayload\" : {\n        \"InstanceId\" : \"{{InstanceId}}\"\n      },\n      \"Handler\" : \"getInstanceProfileName\"\n    },\n    \"name\" : \"getExistingRoleName\",\n    \"action\" : \"aws:executeScript\",\n    \"nextStep\" : \"branchIfProfileExists\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"NoRoleFound\",\n        \"Variable\" : \"{{getExistingRoleName.existingInstanceProfileRoleName}}\",\n        \"NextStep\" : \"createRoleIfNotExists\"\n      } ],\n      \"Default\" : \"checkIfPolicyAttachAllowed\"\n    },\n    \"name\" : \"branchIfProfileExists\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"inputs\" : {\n      \"Choices\" : [ {\n        \"StringEquals\" : \"true\",\n        \"Variable\" : \"{{IsPolicyAttachAllowed}}\",\n        \"NextStep\" : \"getRoleFromInstanceProfile\"\n      } ],\n      \"Default\" : \"createRoleIfNotExists\"\n    },\n    \"name\" : \"checkIfPolicyAttachAllowed\",\n    \"action\" : \"aws:branch\"\n  }, {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingRoleName\",\n      \"Selector\" : \"$.InstanceProfile.Roles[0].RoleName\"\n    } ],\n    \"inputs\" : {\n      \"InstanceProfileName\" : \"{{getExistingRoleName.existingInstanceProfileRoleName}}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetInstanceProfile\"\n    },\n    \"name\" : \"getRoleFromInstanceProfile\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMPatchAssociationToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMPatchAssociation\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMPatchAssociationToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"isEnd\" : true\n  }, {\n    \"inputs\" : {\n      \"Path\" : \"/\",\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"Description\" : \"EC2 role for SSM for Quick-Setup\",\n      \"AssumeRolePolicyDocument\" : \"{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"ec2.amazonaws.com\\\"},\\\"Action\\\":\\\"sts:AssumeRole\\\"}]}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"CreateRole\"\n    },\n    \"name\" : \"createRoleIfNotExists\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"description\" : \"Create AmazonSSMRoleForInstancesQuickSetup Role For SSM Quick Setup\",\n    \"onFailure\" : \"Continue\",\n    \"nextStep\" : \"assertRoleForInstanceProfileExists\"\n  }, {\n    \"inputs\" : {\n      \"PropertySelector\" : \"$.Role.RoleName\",\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"DesiredValues\" : [ \"AmazonSSMRoleForInstancesQuickSetup\" ],\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetRole\"\n    },\n    \"name\" : \"assertRoleForInstanceProfileExists\",\n    \"action\" : \"aws:assertAwsResourceProperty\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMPatchAssociationToRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMPatchAssociation\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMPatchAssociationToRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"createInstanceProfileIfNotExists\"\n  }, {\n    \"inputs\" : {\n      \"InstanceProfileName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"CreateInstanceProfile\"\n    },\n    \"name\" : \"createInstanceProfileIfNotExists\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Continue\",\n    \"nextStep\" : \"addRoleToInstanceProfile\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"InstanceProfileName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AddRoleToInstanceProfile\"\n    },\n    \"name\" : \"addRoleToInstanceProfile\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"onFailure\" : \"Continue\",\n    \"nextStep\" : \"executeAttachIAMToInstance\"\n  }, {\n    \"maxAttempts\" : 10,\n    \"inputs\" : {\n      \"RuntimeParameters\" : {\n        \"AutomationAssumeRole\" : \"{{ AutomationAssumeRole }}\",\n        \"RoleName\" : \"AmazonSSMRoleForInstancesQuickSetup\",\n        \"InstanceId\" : \"{{ InstanceId }}\",\n        \"ForceReplace\" : false\n      },\n      \"DocumentName\" : \"AWS-AttachIAMToInstance\"\n    },\n    \"name\" : \"executeAttachIAMToInstance\",\n    \"action\" : \"aws:executeAutomation\",\n    \"timeoutSeconds\" : 60,\n    \"isEnd\" : true\n  } ]\n}",
            "created_date": "2023-08-11T14:59:11Z",
            "default_version": "1",
            "description": "Composite document for Quick Setup Managing Instances association. This document ensures IAM role for instance profile is created in account with all required policies",
            "document_format": "JSON",
            "document_type": "Automation",
            "document_version": "1",
            "hash": "9f1fd1ce08f8283a55fc2751f455f465b921c07b5b43152eb982d205d6c69277",
            "hash_type": "Sha256",
            "id": "AWSQuickSetup-CreateAndAttachIAMToInstance-tjdfj",
            "latest_version": "1",
            "name": "AWSQuickSetup-CreateAndAttachIAMToInstance-tjdfj",
            "owner": "766176144542",
            "parameter": [
              {
                "default_value": "",
                "description": "",
                "name": "AutomationAssumeRole",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "InstanceId",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "IsPolicyAttachAllowed",
                "type": "String"
              }
            ],
            "permissions": {},
            "platform_types": [
              "Windows",
              "Linux",
              "MacOS"
            ],
            "schema_version": "0.3",
            "status": "Active",
            "tags": {
              "QuickSetupID": "tjdfj",
              "QuickSetupType": "Host Management",
              "QuickSetupVersion": "3.1"
            },
            "tags_all": {
              "QuickSetupID": "tjdfj",
              "QuickSetupType": "Host Management",
              "QuickSetupVersion": "3.1"
            },
            "target_type": "/AWS::EC2::Instance",
            "version_name": ""
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ssm_document",
      "name": "ac--AWSQuickSetup-NameTagRemediation-gj7vw",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ssm:eu-west-2:766176144542:document/AWSQuickSetup-NameTagRemediation-gj7vw",
            "attachments_source": null,
            "content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Composite document for Quick Setup Naming  functionality. This document ensures that the appropriate tag is removed from all nodes in an account that are no longer a target of a Patch Policy.\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"NameValue\" : {\n      \"type\" : \"String\"\n    },\n    \"TargetValues\" : {\n      \"type\" : \"String\"\n    },\n    \"TargetType\" : {\n      \"type\" : \"String\"\n    },\n    \"Region\" : {\n      \"type\" : \"String\"\n    },\n    \"NameKey\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingInstanceProfileRoleName\",\n      \"Selector\" : \"$.Payload.RoleName\"\n    } ],\n    \"inputs\" : {\n      \"Script\" : \"import os\\nimport resource\\nimport boto3\\nimport time\\nimport json\\n\\ndef get_ssm_client(region):\\n    return boto3.client('ssm', region_name=region)\\n\\ndef get_ec2_client(region):\\n    return boto3.client('ec2', region_name=region)\\n\\ndef throw_exception_on_response_code(response):\\n    response_code = str(response[\\\"ResponseMetadata\\\"][\\\"HTTPStatusCode\\\"])\\n    if  response_code != \\\"200\\\":\\n        raise Exception(\\\"Non-OK Status Code received: %s. Full Response: %s. Failing remediation document\\\"%(response_code, str(response)))\\n\\ndef remove_tag_from_resources(on_prem_instances, tag_key, region):\\n    print(\\\"Removing tags from on prem instances: %s\\\"%(\\\",\\\".join(on_prem_instances)))\\n    try:\\n        for on_prem_instance in on_prem_instances:\\n            response = get_ssm_client(region).remove_tags_from_resource(\\n                ResourceType='ManagedInstance',\\n                ResourceId=on_prem_instance,\\n                TagKeys=[\\n                    tag_key\\n                ]\\n            )\\n            print(response)\\n            throw_exception_on_response_code(response)\\n            time.sleep(0.05)\\n    except Exception as e:\\n        print(\\\"Exception occurred removing tag for on prem instance %s: %s\\\"%(on_prem_instance, str(e)))\\n        raise(e)\\n\\ndef delete_tags(ec2_instances, tag_key, tag_value, region):\\n    print(\\\"Removing tags from ec2 instances: %s\\\"%(\\\",\\\".join(ec2_instances)))\\n    try:\\n        for i in range(0, len(ec2_instances), 250):\\n            response = get_ec2_client(region).delete_tags(\\n                DryRun=False,\\n                Resources=ec2_instances[i:i+250],\\n                Tags=[\\n                    {\\n                        'Key': tag_key,\\n                        'Value': tag_value\\n                    }\\n                ]\\n            )\\n            throw_exception_on_response_code(response)\\n            time.sleep(0.20)\\n    except Exception as e:\\n        print(\\\"Exception occurred removing tag from EC2 Instance %s: %s\\\"%(\\\", \\\".join(ec2_instances), str(e)))\\n        raise (e)\\n\\ndef get_inventory(request, region):\\n\\n    try:\\n        instance_ids = []\\n        print(\\\"Calling get_inventory with request : \\\\n%s \\\\n\\\\n\\\"%(str(request)))\\n        response = get_ssm_client(region).get_inventory(**request)\\n        print(\\\"\\\\n\\\\n\\\")\\n        print(response)\\n        throw_exception_on_response_code(response)\\n\\n        [instance_ids.append(i[\\\"Id\\\"]) for i in response[\\\"Entities\\\"]]\\n        next_token = None\\n        if \\\"NextToken\\\" in response:\\n            next_token = response[\\\"NextToken\\\"]\\n\\n        while next_token:\\n            request[\\\"NextToken\\\"] = next_token\\n            response = get_ssm_client(region).get_inventory(**request)\\n            \\n            throw_exception_on_response_code(response)\\n            \\n            [instance_ids.append(i[\\\"Id\\\"]) for i in response[\\\"Entities\\\"]]\\n            \\n            time.sleep(0.33)\\n\\n            if \\\"NextToken\\\" in response:\\n                next_token = response[\\\"NextToken\\\"]\\n            else:\\n                next_token = None\\n\\n        return instance_ids\\n    except Exception as e: \\n        print(\\\"Something went wrong retrieving inventory with request: %s. \\\\\\n         Exception: %s .\\\\n Failing remediation document. \\\"%(request, str(e)))\\n        raise e\\n\\ndef remove_tags(list_of_instances, tag_key, tag_value, region):\\n    mi = []\\n    i = []\\n    for instance in list_of_instances:\\n        if (instance.startswith(\\\"mi\\\")):\\n            mi.append(instance)\\n        else:\\n            i.append(instance)\\n   \\n    delete_tags(i, tag_key, tag_value, region)           \\n    remove_tag_from_resources(mi, tag_key, region)\\n\\ndef get_tag_request(target):\\n    tag_key = check_for_key(target, \\\"Key\\\")\\n    \\n    request = {\\n        \\\"Filters\\\": [{\\n            \\\"Key\\\": \\\"AWS:Tag.Key\\\", \\n            \\\"Values\\\": [tag_key],\\n            \\\"Type\\\": \\\"Equal\\\"\\n\\n        }]\\n    }\\n    # For the case where only a tag-key is targeted.\\n    if \\\"Value\\\" in target:\\n        tag_value = check_for_key(target, \\\"Value\\\")\\n        request[\\\"Filters\\\"].append({\\n            \\\"Key\\\": \\\"AWS:Tag.Value\\\", \\n            \\\"Values\\\": [tag_value],\\n            \\\"Type\\\": \\\"Equal\\\"\\n        })\\n\\n    return request\\n\\ndef get_resource_group_request(target):\\n    # for resource groups, the name is the Target key. e.g. '\\\"Target\\\": {\\\"Key\\\": \\\"ResourceGroupName\\\"}:\\n    resource_group_name = check_for_key(target, \\\"Key\\\")\\n    request = {    \\n        \\\"Filters\\\": [{\\n\\n            \\\"Key\\\": \\\"AWS:ResourceGroup.Name\\\",\\n            \\\"Values\\\": [resource_group_name],\\n            \\\"Type\\\": \\\"Equal\\\"\\n        }]\\n    }\\n    return request\\n\\ndef get_instance_ids_request(target):\\n    request = {\\\"Filters\\\": []}\\n    instance_ids = check_for_key(target, \\\"Key\\\").split(\\\",\\\")\\n    for ids in range(0, len(instance_ids), 40):\\n        request[\\\"Filters\\\"].append(            {\\n                \\\"Key\\\": \\\"AWS:InstanceInformation.InstanceId\\\",\\n                \\\"Values\\\": instance_ids[ids:ids+40],\\n                \\\"Type\\\": \\\"Equal\\\"\\n            })\\n    return request\\n\\ndef check_for_key(hashmap, key):\\n    if not key in hashmap:\\n        raise Exception(\\\"The required key %s is not present. Failing.\\\"%(key))\\n    else:\\n        # return the value\\n        return hashmap[key]\\n\\ndef get_target_request(target_type, target):\\n    if target_type.lower() == \\\"tags\\\":\\n        return get_tag_request(target)\\n    elif target_type.lower() == \\\"instanceids\\\":\\n        return get_instance_ids_request(target)\\n    elif target_type.lower() == \\\"resourcegroups\\\":\\n        return get_resource_group_request(target)\\n    \\n    raise Exception(\\\"Unable to understand the target type of the Patch Policy.\\\\\\n         Received values was: %s. Failing remediation document. \\\"%(target_type))\\n\\ndef begin_remediation(event, context):\\n    # Get all variables\\n    target_type = check_for_key(event, \\\"TargetType\\\")\\n\\n    if target_type == \\\"*\\\":\\n        return\\n\\n    name_key = check_for_key(event, \\\"NameKey\\\")\\n    name_value = check_for_key(event, \\\"NameValue\\\")\\n    region = check_for_key(event, \\\"Region\\\")\\n\\n    ## Add exception (to make it more robust)\\n    target_dict = check_for_key(event, \\\"Targets\\\")\\n\\n    target = json.loads(target_dict)\\n\\n    # This filter will return all targets of the Patch Policy.\\n    request = get_target_request(target_type, target)\\n    target_instances = get_inventory(request, region)\\n\\n    # This will return targets that have the name tag\\n    new_request = {\\\"Filters\\\": [{\\n            \\\"Key\\\": \\\"AWS:Tag.Key\\\",\\n            \\\"Values\\\": [name_key],\\n            \\\"Type\\\": \\\"Equal\\\"\\n        },\\n        {\\n            \\\"Key\\\": \\\"AWS:InstanceInformation.InstanceStatus\\\",\\n            \\\"Values\\\": [\\\"Terminated\\\", \\\"ConnectionLost\\\"],\\n            \\\"Type\\\": \\\"NotEqual\\\"\\n        }]}\\n\\n    named_instances = get_inventory(new_request, region)\\n\\n    # 'get instances that are NOT a target of the Patch Policy but have the name tag'\\n    instances_to_remove = set(named_instances) - set(target_instances)\\n\\n    # remove the tags\\n    remove_tags(instances_to_remove, name_key, name_value, region)\",\n      \"Runtime\" : \"python3.8\",\n      \"InputPayload\" : {\n        \"NameValue\" : \"{{NameValue}}\",\n        \"TargetType\" : \"{{TargetType}}\",\n        \"Region\" : \"{{Region}}\",\n        \"Targets\" : \"{{TargetValues}}\",\n        \"NameKey\" : \"{{NameKey}}\"\n      },\n      \"Handler\" : \"begin_remediation\"\n    },\n    \"name\" : \"performRemediation\",\n    \"action\" : \"aws:executeScript\",\n    \"isEnd\" : true\n  } ]\n}",
            "created_date": "2023-07-28T06:46:29Z",
            "default_version": "1",
            "description": "Composite document for Quick Setup Naming  functionality. This document ensures that the appropriate tag is removed from all nodes in an account that are no longer a target of a Patch Policy.",
            "document_format": "JSON",
            "document_type": "Automation",
            "document_version": "1",
            "hash": "21e1a8cec35468e1ac1391c5b7e868a7da249c20f6dea67f59cd7b5ebf6a5a8d",
            "hash_type": "Sha256",
            "id": "AWSQuickSetup-NameTagRemediation-gj7vw",
            "latest_version": "1",
            "name": "AWSQuickSetup-NameTagRemediation-gj7vw",
            "owner": "766176144542",
            "parameter": [
              {
                "default_value": "",
                "description": "",
                "name": "AutomationAssumeRole",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "NameValue",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "TargetValues",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "TargetType",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "Region",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "NameKey",
                "type": "String"
              }
            ],
            "permissions": {},
            "platform_types": [
              "Windows",
              "Linux",
              "MacOS"
            ],
            "schema_version": "0.3",
            "status": "Active",
            "tags": {
              "QuickSetupID": "gj7vw",
              "QuickSetupType": "Patch Manager",
              "QuickSetupVersion": "1.3"
            },
            "tags_all": {
              "QuickSetupID": "gj7vw",
              "QuickSetupType": "Patch Manager",
              "QuickSetupVersion": "1.3"
            },
            "target_type": "",
            "version_name": ""
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ssm_document",
      "name": "ac--AWSQuickSetup-UpdateExistingInstanceProfile-tjdfj",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ssm:eu-west-2:766176144542:document/AWSQuickSetup-UpdateExistingInstanceProfile-tjdfj",
            "attachments_source": null,
            "content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"Composite document for Quick Setup Managing Instances association. This document updates the user provided instance profile with roles and policies\",\n  \"assumeRole\" : \"{{AutomationAssumeRole}}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceId\" : {\n      \"type\" : \"String\"\n    },\n    \"InstanceProfile\" : {\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"outputs\" : [ {\n      \"Type\" : \"String\",\n      \"Name\" : \"existingRoleName\",\n      \"Selector\" : \"$.InstanceProfile.Roles[0].RoleName\"\n    } ],\n    \"inputs\" : {\n      \"InstanceProfileName\" : \"{{InstanceProfile}}\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"GetInstanceProfile\"\n    },\n    \"name\" : \"getRoleFromInstanceProfile\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMManagedInstanceCoreToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"nextStep\" : \"attachAmazonSSMPatchAssociationToExistingRole\"\n  }, {\n    \"inputs\" : {\n      \"RoleName\" : \"{{getRoleFromInstanceProfile.existingRoleName}}\",\n      \"PolicyArn\" : \"arn:aws:iam::aws:policy/AmazonSSMPatchAssociation\",\n      \"Service\" : \"iam\",\n      \"Api\" : \"AttachRolePolicy\"\n    },\n    \"name\" : \"attachAmazonSSMPatchAssociationToExistingRole\",\n    \"action\" : \"aws:executeAwsApi\",\n    \"isEnd\" : true\n  } ]\n}",
            "created_date": "2023-08-11T14:59:11Z",
            "default_version": "1",
            "description": "Composite document for Quick Setup Managing Instances association. This document updates the user provided instance profile with roles and policies",
            "document_format": "JSON",
            "document_type": "Automation",
            "document_version": "1",
            "hash": "010a5db07b8ed577b2f3ec3c58a5b942786e23674a9f816a601d3a9536b608da",
            "hash_type": "Sha256",
            "id": "AWSQuickSetup-UpdateExistingInstanceProfile-tjdfj",
            "latest_version": "1",
            "name": "AWSQuickSetup-UpdateExistingInstanceProfile-tjdfj",
            "owner": "766176144542",
            "parameter": [
              {
                "default_value": "",
                "description": "",
                "name": "AutomationAssumeRole",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "InstanceId",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "",
                "name": "InstanceProfile",
                "type": "String"
              }
            ],
            "permissions": {},
            "platform_types": [
              "Windows",
              "Linux",
              "MacOS"
            ],
            "schema_version": "0.3",
            "status": "Active",
            "tags": {
              "QuickSetupID": "tjdfj",
              "QuickSetupType": "Host Management",
              "QuickSetupVersion": "3.1"
            },
            "tags_all": {
              "QuickSetupID": "tjdfj",
              "QuickSetupType": "Host Management",
              "QuickSetupVersion": "3.1"
            },
            "target_type": "/AWS::EC2::Instance",
            "version_name": ""
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ssm_document",
      "name": "ac--QuickSetup-Remediation-AutomationDocument-gj7vw",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ssm:eu-west-2:766176144542:document/QuickSetup-Remediation-AutomationDocument-gj7vw",
            "attachments_source": null,
            "content": "{\n  \"schemaVersion\" : \"0.3\",\n  \"description\" : \"This Document is to trigger the Lambda function to perform remediation only.\",\n  \"assumeRole\" : \"{{ AutomationAssumeRole }}\",\n  \"parameters\" : {\n    \"AutomationAssumeRole\" : {\n      \"default\" : \"arn:aws:iam::766176144542:role/AWS-QuickSetup-Remediation-AutomationRole-gj7vw\",\n      \"type\" : \"String\"\n    },\n    \"BucketName\" : {\n      \"default\" : \"aws-quicksetup-patchpolicy-766176144542-gj7vw\",\n      \"type\" : \"String\"\n    },\n    \"LambdaFunctionArn\" : {\n      \"default\" : \"arn:aws:lambda:eu-west-2:766176144542:function:baseline-overrides-bcd8-gj7vw\",\n      \"type\" : \"String\"\n    },\n    \"PatchBaselines\" : {\n      \"default\" : \"{\\\"ALMA_LINUX\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-026ae12db9c48cb38\\\",\\\"label\\\":\\\"AWS-AlmaLinuxDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Alma Linux Provided by AWS.\\\",\\\"disabled\\\":false},\\\"AMAZON_LINUX\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0be7ab14314283c20\\\",\\\"label\\\":\\\"AWS-AmazonLinuxDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Amazon Linux Provided by AWS.\\\",\\\"disabled\\\":false},\\\"AMAZON_LINUX_2\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0b49b16112356d35a\\\",\\\"label\\\":\\\"AWS-AmazonLinux2DefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Amazon Linux 2 Provided by AWS.\\\",\\\"disabled\\\":false},\\\"AMAZON_LINUX_2022\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0a763b81ab503cd55\\\",\\\"label\\\":\\\"AWS-AmazonLinux2022DefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Amazon Linux 2022 Provided by AWS.\\\",\\\"disabled\\\":false},\\\"AMAZON_LINUX_2023\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0a335ff2e0c9c6d57\\\",\\\"label\\\":\\\"AWS-AmazonLinux2023DefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Amazon Linux 2023 Provided by AWS.\\\",\\\"disabled\\\":false},\\\"CENTOS\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0ab5882985cefc37c\\\",\\\"label\\\":\\\"AWS-CentOSDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for CentOS Provided by AWS.\\\",\\\"disabled\\\":false},\\\"DEBIAN\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0298410e8bfb4ac84\\\",\\\"label\\\":\\\"AWS-DebianDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Debian Provided by AWS.\\\",\\\"disabled\\\":false},\\\"ORACLE_LINUX\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0039cc7b956dbd532\\\",\\\"label\\\":\\\"AWS-OracleLinuxDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Oracle Linux Server Provided by AWS.\\\",\\\"disabled\\\":false},\\\"RASPBIAN\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-06f36acfc3b43e6ee\\\",\\\"label\\\":\\\"AWS-RaspbianDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Raspbian Provided by AWS.\\\",\\\"disabled\\\":false},\\\"REDHAT_ENTERPRISE_LINUX\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0fb89bc9ac3b89eee\\\",\\\"label\\\":\\\"AWS-RedHatDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Redhat Enterprise Linux Provided by AWS.\\\",\\\"disabled\\\":false},\\\"ROCKY_LINUX\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-01c0c0f8181a40210\\\",\\\"label\\\":\\\"AWS-RockyLinuxDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Rocky Linux Provided by AWS.\\\",\\\"disabled\\\":false},\\\"SUSE\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0d96acfb75747719f\\\",\\\"label\\\":\\\"AWS-SuseDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Suse Provided by AWS.\\\",\\\"disabled\\\":false},\\\"UBUNTU\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0ec6a38643f7e78be\\\",\\\"label\\\":\\\"AWS-UbuntuDefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline for Ubuntu Provided by AWS.\\\",\\\"disabled\\\":false},\\\"WINDOWS\\\":{\\\"value\\\":\\\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0962e59eb68b92d67\\\",\\\"label\\\":\\\"AWS-DefaultPatchBaseline\\\",\\\"description\\\":\\\"Default Patch Baseline Provided by AWS.\\\",\\\"disabled\\\":false}}\",\n      \"type\" : \"String\"\n    }\n  },\n  \"mainSteps\" : [ {\n    \"inputs\" : {\n      \"FunctionName\" : \"{{ LambdaFunctionArn }}\",\n      \"InputPayload\" : {\n        \"ResourceProperties\" : {\n          \"BucketName\" : \"{{ BucketName }}\",\n          \"PatchBaselines\" : \"{{ PatchBaselines }}\"\n        },\n        \"RequestType\" : \"Remediate\"\n      }\n    },\n    \"name\" : \"invokeBaselineOverridesLambdaFunction\",\n    \"action\" : \"aws:invokeLambdaFunction\",\n    \"timeoutSeconds\" : 300\n  } ]\n}",
            "created_date": "2023-07-28T06:47:26Z",
            "default_version": "1",
            "description": "This Document is to trigger the Lambda function to perform remediation only.",
            "document_format": "JSON",
            "document_type": "Automation",
            "document_version": "1",
            "hash": "0a355d63a99c54ccca772465b0632b883b23e055d2a6776eea4af2ec0f315956",
            "hash_type": "Sha256",
            "id": "QuickSetup-Remediation-AutomationDocument-gj7vw",
            "latest_version": "1",
            "name": "QuickSetup-Remediation-AutomationDocument-gj7vw",
            "owner": "766176144542",
            "parameter": [
              {
                "default_value": "arn:aws:iam::766176144542:role/AWS-QuickSetup-Remediation-AutomationRole-gj7vw",
                "description": "",
                "name": "AutomationAssumeRole",
                "type": "String"
              },
              {
                "default_value": "aws-quicksetup-patchpolicy-766176144542-gj7vw",
                "description": "",
                "name": "BucketName",
                "type": "String"
              },
              {
                "default_value": "arn:aws:lambda:eu-west-2:766176144542:function:baseline-overrides-bcd8-gj7vw",
                "description": "",
                "name": "LambdaFunctionArn",
                "type": "String"
              },
              {
                "default_value": "{\"ALMA_LINUX\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-026ae12db9c48cb38\",\"label\":\"AWS-AlmaLinuxDefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Alma Linux Provided by AWS.\",\"disabled\":false},\"AMAZON_LINUX\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0be7ab14314283c20\",\"label\":\"AWS-AmazonLinuxDefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Amazon Linux Provided by AWS.\",\"disabled\":false},\"AMAZON_LINUX_2\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0b49b16112356d35a\",\"label\":\"AWS-AmazonLinux2DefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Amazon Linux 2 Provided by AWS.\",\"disabled\":false},\"AMAZON_LINUX_2022\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0a763b81ab503cd55\",\"label\":\"AWS-AmazonLinux2022DefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Amazon Linux 2022 Provided by AWS.\",\"disabled\":false},\"AMAZON_LINUX_2023\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0a335ff2e0c9c6d57\",\"label\":\"AWS-AmazonLinux2023DefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Amazon Linux 2023 Provided by AWS.\",\"disabled\":false},\"CENTOS\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0ab5882985cefc37c\",\"label\":\"AWS-CentOSDefaultPatchBaseline\",\"description\":\"Default Patch Baseline for CentOS Provided by AWS.\",\"disabled\":false},\"DEBIAN\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0298410e8bfb4ac84\",\"label\":\"AWS-DebianDefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Debian Provided by AWS.\",\"disabled\":false},\"ORACLE_LINUX\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0039cc7b956dbd532\",\"label\":\"AWS-OracleLinuxDefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Oracle Linux Server Provided by AWS.\",\"disabled\":false},\"RASPBIAN\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-06f36acfc3b43e6ee\",\"label\":\"AWS-RaspbianDefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Raspbian Provided by AWS.\",\"disabled\":false},\"REDHAT_ENTERPRISE_LINUX\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0fb89bc9ac3b89eee\",\"label\":\"AWS-RedHatDefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Redhat Enterprise Linux Provided by AWS.\",\"disabled\":false},\"ROCKY_LINUX\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-01c0c0f8181a40210\",\"label\":\"AWS-RockyLinuxDefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Rocky Linux Provided by AWS.\",\"disabled\":false},\"SUSE\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0d96acfb75747719f\",\"label\":\"AWS-SuseDefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Suse Provided by AWS.\",\"disabled\":false},\"UBUNTU\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0ec6a38643f7e78be\",\"label\":\"AWS-UbuntuDefaultPatchBaseline\",\"description\":\"Default Patch Baseline for Ubuntu Provided by AWS.\",\"disabled\":false},\"WINDOWS\":{\"value\":\"arn:aws:ssm:eu-west-2:628322100848:patchbaseline/pb-0962e59eb68b92d67\",\"label\":\"AWS-DefaultPatchBaseline\",\"description\":\"Default Patch Baseline Provided by AWS.\",\"disabled\":false}}",
                "description": "",
                "name": "PatchBaselines",
                "type": "String"
              }
            ],
            "permissions": {},
            "platform_types": [
              "Windows",
              "Linux",
              "MacOS"
            ],
            "schema_version": "0.3",
            "status": "Active",
            "tags": {
              "QuickSetupID": "gj7vw",
              "QuickSetupType": "Patch Manager",
              "QuickSetupVersion": "1.3"
            },
            "tags_all": {
              "QuickSetupID": "gj7vw",
              "QuickSetupType": "Patch Manager",
              "QuickSetupVersion": "1.3"
            },
            "target_type": "",
            "version_name": ""
          },
          "sensitive_attributes": []
        }
      ]
    }
  ]
}